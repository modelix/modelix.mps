export class KeyCodeTranslator {

    protected static table: number[];

    protected static initTable(): void {
        this.table = [];
        this.table[JSKeyCodes.KEY_BACK_SPACE] = JavaKeyCodes.VK_BACK_SPACE;
        this.table[JSKeyCodes.KEY_DELETE] = JavaKeyCodes.VK_DELETE;
        this.table[JSKeyCodes.KEY_INSERT] = JavaKeyCodes.VK_INSERT;
        this.table[JSKeyCodes.KEY_END] = JavaKeyCodes.VK_END;
        this.table[JSKeyCodes.KEY_HOME] = JavaKeyCodes.VK_HOME;
        this.table[JSKeyCodes.KEY_SHIFT] = JavaKeyCodes.VK_SHIFT;
        this.table[JSKeyCodes.KEY_CONTROL] = JavaKeyCodes.VK_CONTROL;
        this.table[JSKeyCodes.KEY_META] = JavaKeyCodes.VK_META;
        this.table[JSKeyCodes.KEY_ALT] = JavaKeyCodes.VK_ALT;
        this.table[JSKeyCodes.KEY_SPACE] = JavaKeyCodes.VK_SPACE;
        this.table[JSKeyCodes.KEY_CANCEL] = JavaKeyCodes.VK_CANCEL;
        this.table[JSKeyCodes.KEY_CLEAR] = JavaKeyCodes.VK_CLEAR;
        this.table[JSKeyCodes.KEY_TAB] = JavaKeyCodes.VK_TAB;
        this.table[JSKeyCodes.KEY_RETURN] = JavaKeyCodes.VK_ENTER;
        this.table[JSKeyCodes.KEY_ENTER] = JavaKeyCodes.VK_ENTER;
        this.table[JSKeyCodes.KEY_LEFT] = JavaKeyCodes.VK_LEFT;
        this.table[JSKeyCodes.KEY_RIGHT] = JavaKeyCodes.VK_RIGHT;
        this.table[JSKeyCodes.KEY_UP] = JavaKeyCodes.VK_UP;
        this.table[JSKeyCodes.KEY_DOWN] = JavaKeyCodes.VK_DOWN;
        this.table[JSKeyCodes.KEY_ESCAPE] = JavaKeyCodes.VK_ESCAPE;
        this.table[JSKeyCodes.KEY_PAGE_UP] = JavaKeyCodes.VK_PAGE_UP;
        this.table[JSKeyCodes.KEY_PAGE_DOWN] = JavaKeyCodes.VK_PAGE_DOWN;
        this.table[JSKeyCodes.KEY_HELP] = JavaKeyCodes.VK_HELP;
        this.table[JSKeyCodes.KEY_PAUSE] = JavaKeyCodes.VK_PAUSE;
        this.table[JSKeyCodes.KEY_CAPS_LOCK] = JavaKeyCodes.VK_CAPS_LOCK;
        this.table[JSKeyCodes.KEY_PRINTSCREEN] = JavaKeyCodes.VK_PRINTSCREEN;
        this.table[JSKeyCodes.KEY_SEMICOLON] = JavaKeyCodes.VK_SEMICOLON;
        this.table[JSKeyCodes.KEY_EQUALS] = JavaKeyCodes.VK_EQUALS;
        this.table[JSKeyCodes.KEY_CONTEXT_MENU] = JavaKeyCodes.VK_CONTEXT_MENU;
        this.table[JSKeyCodes.KEY_MULTIPLY] = JavaKeyCodes.VK_MULTIPLY;
        this.table[JSKeyCodes.KEY_ADD] = JavaKeyCodes.VK_ADD;
        this.table[JSKeyCodes.KEY_SUBTRACT] = JavaKeyCodes.VK_SUBTRACT;
        this.table[JSKeyCodes.KEY_DIVIDE] = JavaKeyCodes.VK_DIVIDE;
        this.table[JSKeyCodes.KEY_SEPARATOR] = JavaKeyCodes.VK_SEPARATER;
        this.table[JSKeyCodes.KEY_DECIMAL] = JavaKeyCodes.VK_DECIMAL;
        this.table[JSKeyCodes.KEY_NUM_LOCK] = JavaKeyCodes.VK_NUM_LOCK;
        this.table[JSKeyCodes.KEY_SCROLL_LOCK] = JavaKeyCodes.VK_SCROLL_LOCK;
        this.table[JSKeyCodes.KEY_COMMA] = JavaKeyCodes.VK_COMMA;
        this.table[JSKeyCodes.KEY_PERIOD] = JavaKeyCodes.VK_PERIOD;
        this.table[JSKeyCodes.KEY_SLASH] = JavaKeyCodes.VK_SLASH;
        this.table[JSKeyCodes.KEY_BACK_QUOTE] = JavaKeyCodes.VK_BACK_QUOTE;
        this.table[JSKeyCodes.KEY_OPEN_BRACKET] = JavaKeyCodes.VK_OPEN_BRACKET;
        this.table[JSKeyCodes.KEY_BACK_SLASH] = JavaKeyCodes.VK_BACK_SLASH;
        this.table[JSKeyCodes.KEY_CLOSE_BRACKET] = JavaKeyCodes.VK_CLOSE_BRACKET;
        this.table[JSKeyCodes.KEY_QUOTE] = JavaKeyCodes.VK_QUOTE;
        this.initConsecutiveKeys(JSKeyCodes.KEY_NUMPAD0, JSKeyCodes.KEY_NUMPAD9, JavaKeyCodes.VK_NUMPAD0);
        this.initConsecutiveKeys(JSKeyCodes.KEY_F1, JSKeyCodes.KEY_F24, JavaKeyCodes.VK_F1);
        this.initConsecutiveKeys(JSKeyCodes.KEY_0, JSKeyCodes.KEY_9, JavaKeyCodes.VK_0);
        this.initConsecutiveKeys(JSKeyCodes.KEY_A, JSKeyCodes.KEY_Z, JavaKeyCodes.VK_A);

        this.table[187] = JavaKeyCodes.VK_ADD;
        this.table[189] = JavaKeyCodes.VK_MINUS;
    }

    protected static initConsecutiveKeys(jsStart: number, jsEnd: number, javaStart: number): void {
        for (let i: number = jsStart; i <= jsEnd; i++) {
            this.table[i] = javaStart + i - jsStart;
        }
    }

    static translate(keyCode: number): number {
        if (keyCode == null || keyCode === 0) return 0;
        if (this.table == null) this.initTable();
        const result = this.table[keyCode];
        if (result === undefined) {
            // return keyCode;
            throw new Error("Unknown keyCode: " + keyCode);
        }
        return result;
    }

    static isModifierKey(keyCode: number) {
        if (keyCode === JSKeyCodes.KEY_SHIFT) return true;
        if (keyCode === JSKeyCodes.KEY_CONTROL) return true;
        if (keyCode === JSKeyCodes.KEY_ALT) return true;
        if (keyCode === JSKeyCodes.KEY_META) return true;
        return false;
    }
}



export class JSKeyCodes {
    static KEY_CANCEL = 3;
    static KEY_HELP = 6;
    static KEY_BACK_SPACE = 8;
    static KEY_TAB = 9;
    static KEY_CLEAR = 12;
    static KEY_RETURN = 13;
    static KEY_ENTER = 14;
    static KEY_SHIFT = 16;
    static KEY_CONTROL = 17;
    static KEY_ALT = 18;
    static KEY_PAUSE = 19;
    static KEY_CAPS_LOCK = 20;
    static KEY_ESCAPE = 27;
    static KEY_SPACE = 32;
    static KEY_PAGE_UP = 33;
    static KEY_PAGE_DOWN = 34;
    static KEY_END = 35;
    static KEY_HOME = 36;
    static KEY_LEFT = 37;
    static KEY_UP = 38;
    static KEY_RIGHT = 39;
    static KEY_DOWN = 40;
    static KEY_PRINTSCREEN = 44;
    static KEY_INSERT = 45;
    static KEY_DELETE = 46;
    static KEY_0 = 48;
    static KEY_1 = 49;
    static KEY_2 = 50;
    static KEY_3 = 51;
    static KEY_4 = 52;
    static KEY_5 = 53;
    static KEY_6 = 54;
    static KEY_7 = 55;
    static KEY_8 = 56;
    static KEY_9 = 57;
    static KEY_SEMICOLON = 59;
    static KEY_EQUALS = 61;
    static KEY_A = 65;
    static KEY_B = 66;
    static KEY_C = 67;
    static KEY_D = 68;
    static KEY_E = 69;
    static KEY_F = 70;
    static KEY_G = 71;
    static KEY_H = 72;
    static KEY_I = 73;
    static KEY_J = 74;
    static KEY_K = 75;
    static KEY_L = 76;
    static KEY_M = 77;
    static KEY_N = 78;
    static KEY_O = 79;
    static KEY_P = 80;
    static KEY_Q = 81;
    static KEY_R = 82;
    static KEY_S = 83;
    static KEY_T = 84;
    static KEY_U = 85;
    static KEY_V = 86;
    static KEY_W = 87;
    static KEY_X = 88;
    static KEY_Y = 89;
    static KEY_Z = 90;
    static KEY_CONTEXT_MENU = 93;
    static KEY_NUMPAD0 = 96;
    static KEY_NUMPAD1 = 97;
    static KEY_NUMPAD2 = 98;
    static KEY_NUMPAD3 = 99;
    static KEY_NUMPAD4 = 100;
    static KEY_NUMPAD5 = 101;
    static KEY_NUMPAD6 = 102;
    static KEY_NUMPAD7 = 103;
    static KEY_NUMPAD8 = 104;
    static KEY_NUMPAD9 = 105;
    static KEY_MULTIPLY = 106;
    static KEY_ADD = 107;
    static KEY_SEPARATOR = 108;
    static KEY_SUBTRACT = 109;
    static KEY_DECIMAL = 110;
    static KEY_DIVIDE = 111;
    static KEY_F1 = 112;
    static KEY_F2 = 113;
    static KEY_F3 = 114;
    static KEY_F4 = 115;
    static KEY_F5 = 116;
    static KEY_F6 = 117;
    static KEY_F7 = 118;
    static KEY_F8 = 119;
    static KEY_F9 = 120;
    static KEY_F10 = 121;
    static KEY_F11 = 122;
    static KEY_F12 = 123;
    static KEY_F13 = 124;
    static KEY_F14 = 125;
    static KEY_F15 = 126;
    static KEY_F16 = 127;
    static KEY_F17 = 128;
    static KEY_F18 = 129;
    static KEY_F19 = 130;
    static KEY_F20 = 131;
    static KEY_F21 = 132;
    static KEY_F22 = 133;
    static KEY_F23 = 134;
    static KEY_F24 = 135;
    static KEY_NUM_LOCK = 144;
    static KEY_SCROLL_LOCK = 145;
    static KEY_COMMA = 188;
    static KEY_PERIOD = 190;
    static KEY_SLASH = 191;
    static KEY_BACK_QUOTE = 192;
    static KEY_OPEN_BRACKET = 219;
    static KEY_BACK_SLASH = 220;
    static KEY_CLOSE_BRACKET = 221;
    static KEY_QUOTE = 222;
    static KEY_META = 91;
}

export class JavaKeyCodes {
    static VK_ENTER = 10;
    static VK_BACK_SPACE = 8;
    static VK_TAB = 9;
    static VK_CANCEL = 0x03;
    static VK_CLEAR = 0x0C;
    static VK_SHIFT = 0x10;
    static VK_CONTROL = 0x11;
    static VK_ALT = 0x12;
    static VK_PAUSE = 0x13;
    static VK_CAPS_LOCK = 0x14;
    static VK_ESCAPE = 0x1B;
    static VK_SPACE = 0x20;
    static VK_PAGE_UP = 0x21;
    static VK_PAGE_DOWN = 0x22;
    static VK_END = 0x23;
    static VK_HOME = 0x24;
    static VK_LEFT = 0x25;
    static VK_UP = 0x26;
    static VK_RIGHT = 0x27;
    static VK_DOWN = 0x28;
    static VK_COMMA = 0x2C;
    static VK_MINUS = 0x2D;
    static VK_PERIOD = 0x2E;
    static VK_SLASH = 0x2F;
    static VK_0 = 0x30;
    static VK_1 = 0x31;
    static VK_2 = 0x32;
    static VK_3 = 0x33;
    static VK_4 = 0x34;
    static VK_5 = 0x35;
    static VK_6 = 0x36;
    static VK_7 = 0x37;
    static VK_8 = 0x38;
    static VK_9 = 0x39;
    static VK_SEMICOLON = 0x3B;
    static VK_EQUALS = 0x3D;
    static VK_A = 0x41;
    static VK_B = 0x42;
    static VK_C = 0x43;
    static VK_D = 0x44;
    static VK_E = 0x45;
    static VK_F = 0x46;
    static VK_G = 0x47;
    static VK_H = 0x48;
    static VK_I = 0x49;
    static VK_J = 0x4A;
    static VK_K = 0x4B;
    static VK_L = 0x4C;
    static VK_M = 0x4D;
    static VK_N = 0x4E;
    static VK_O = 0x4F;
    static VK_P = 0x50;
    static VK_Q = 0x51;
    static VK_R = 0x52;
    static VK_S = 0x53;
    static VK_T = 0x54;
    static VK_U = 0x55;
    static VK_V = 0x56;
    static VK_W = 0x57;
    static VK_X = 0x58;
    static VK_Y = 0x59;
    static VK_Z = 0x5A;
    static VK_OPEN_BRACKET = 0x5B;
    static VK_BACK_SLASH = 0x5C;
    static VK_CLOSE_BRACKET = 0x5D;
    static VK_NUMPAD0 = 0x60;
    static VK_NUMPAD1 = 0x61;
    static VK_NUMPAD2 = 0x62;
    static VK_NUMPAD3 = 0x63;
    static VK_NUMPAD4 = 0x64;
    static VK_NUMPAD5 = 0x65;
    static VK_NUMPAD6 = 0x66;
    static VK_NUMPAD7 = 0x67;
    static VK_NUMPAD8 = 0x68;
    static VK_NUMPAD9 = 0x69;
    static VK_MULTIPLY = 0x6A;
    static VK_ADD = 0x6B;
    static VK_SEPARATER = 0x6C;
    static VK_SUBTRACT = 0x6D;
    static VK_DECIMAL = 0x6E;
    static VK_DIVIDE = 0x6F;
    static VK_DELETE = 0x7F;
    static VK_NUM_LOCK = 0x90;
    static VK_SCROLL_LOCK = 0x91;
    static VK_F1 = 0x70;
    static VK_F2 = 0x71;
    static VK_F3 = 0x72;
    static VK_F4 = 0x73;
    static VK_F5 = 0x74;
    static VK_F6 = 0x75;
    static VK_F7 = 0x76;
    static VK_F8 = 0x77;
    static VK_F9 = 0x78;
    static VK_F10 = 0x79;
    static VK_F11 = 0x7A;
    static VK_F12 = 0x7B;
    static VK_F13 = 0xF000;
    static VK_F14 = 0xF001;
    static VK_F15 = 0xF002;
    static VK_F16 = 0xF003;
    static VK_F17 = 0xF004;
    static VK_F18 = 0xF005;
    static VK_F19 = 0xF006;
    static VK_F20 = 0xF007;
    static VK_F21 = 0xF008;
    static VK_F22 = 0xF009;
    static VK_F23 = 0xF00A;
    static VK_F24 = 0xF00B;
    static VK_PRINTSCREEN = 0x9A;
    static VK_INSERT = 0x9B;
    static VK_HELP = 0x9C;
    static VK_META = 0x9D;
    static VK_BACK_QUOTE = 0xC0;
    static VK_QUOTE = 0xDE;
    static VK_KP_UP = 0xE0;
    static VK_KP_DOWN = 0xE1;
    static VK_KP_LEFT = 0xE2;
    static VK_KP_RIGHT = 0xE3;
    static VK_DEAD_GRAVE = 0x80;
    static VK_DEAD_ACUTE = 0x81;
    static VK_DEAD_CIRCUMFLEX = 0x82;
    static VK_DEAD_TILDE = 0x83;
    static VK_DEAD_MACRON = 0x84;
    static VK_DEAD_BREVE = 0x85;
    static VK_DEAD_ABOVEDOT = 0x86;
    static VK_DEAD_DIAERESIS = 0x87;
    static VK_DEAD_ABOVERING = 0x88;
    static VK_DEAD_DOUBLEACUTE = 0x89;
    static VK_DEAD_CARON = 0x8;
    static VK_DEAD_CEDILLA = 0x8;
    static VK_DEAD_OGONEK = 0x8;
    static VK_DEAD_IOTA = 0x8;
    static VK_DEAD_VOICED_SOUND = 0x8;
    static VK_DEAD_SEMIVOICED_SOUND = 0x8;
    static VK_AMPERSAND = 0x96;
    static VK_ASTERISK = 0x97;
    static VK_QUOTEDBL = 0x98;
    static VK_LESS = 0x99;
    static VK_AT = 0x0200;
    static VK_COLON = 0x0201;
    static VK_CIRCUMFLEX = 0x0202;
    static VK_DOLLAR = 0x0203;
    static VK_EURO_SIGN = 0x0204;
    static VK_EXCLAMATION_MARK = 0x0205;
    static VK_INVERTED_EXCLAMATION_MARK = 0x0206;
    static VK_LEFT_PARENTHESIS = 0x0207;
    static VK_NUMBER_SIGN = 0x0208;
    static VK_PLUS = 0x0209;
    static VK_RIGHT_PARENTHESIS = 0x020A;
    static VK_UNDERSCORE = 0x020B;
    static VK_WINDOWS = 0x020C;
    static VK_CONTEXT_MENU = 0x020D;
    static VK_FINAL = 0x0018;
    static VK_CONVERT = 0x001C;
    static VK_NONCONVERT = 0x001D;
    static VK_ACCEPT = 0x001E;
    static VK_MODECHANGE = 0x001F;
    static VK_KANA = 0x0015;
    static VK_KANJI = 0x0019;
    static VK_ALPHANUMERIC = 0x00F0;
    static VK_KATAKANA = 0x00F1;
    static VK_HIRAGANA = 0x00F2;
    static VK_FULL_WIDTH = 0x00F3;
    static VK_HALF_WIDTH = 0x00F4;
    static VK_ROMAN_CHARACTERS = 0x00F5;
    static VK_ALL_CANDIDATES = 0x0100;
    static VK_PREVIOUS_CANDIDATE = 0x0101;
    static VK_CODE_INPUT = 0x0102;
    static VK_JAPANESE_KATAKANA = 0x0103;
    static VK_JAPANESE_HIRAGANA = 0x0104;
    static VK_JAPANESE_ROMAN = 0x0105;
    static VK_KANA_LOCK = 0x0106;
    static VK_INPUT_METHOD_ON_OFF = 0x0107;
    static VK_CUT = 0xFFD1;
    static VK_COPY = 0xFFCD;
    static VK_PASTE = 0xFFCF;
    static VK_UNDO = 0xFFCB;
    static VK_AGAIN = 0xFFC9;
    static VK_FIND = 0xFFD0;
    static VK_PROPS = 0xFFCA;
    static VK_STOP = 0xFFC8;
    static VK_COMPOSE = 0xFF20;
    static VK_ALT_GRAPH = 0xFF7E;
    static VK_BEGIN = 0xFF58;
    static VK_UNDEFINED = 0x0;
}
