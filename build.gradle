import de.itemis.mps.gradle.BuildLanguages
import de.itemis.mps.gradle.RunAntScript
import de.itemis.mps.gradle.GenerateLibrariesXml
import de.itemis.mps.gradle.TestLanguages

plugins {
    id "java"
}

configurations {
    ant_lib
    mps
    mpsArtifacts
    libs
}

File scriptFile(String relativePath) {
    new File("$rootDir/build/$relativePath")
}

ext.artifactsDir = new File(rootDir, 'artifacts')
ext.libsDir = new File(rootDir, 'libs')
ext.mpsDir = new File(artifactsDir, 'mps')

ext.mpsVersion = '2020.1.1'

dependencies {
    ant_lib "org.apache.ant:ant-junit:1.10.1"
    mps "com.jetbrains:mps:$mpsVersion"
    mpsArtifacts "de.itemis.mps:extensions:2020.1+"
    libs "de.itemis.mps.build.example:javalib:1.0+"
    libs "org.jdom:jdom:2.0.2"
    project (':ui-client')
    project (':model-server')
}

task generateLibrariesXml(type: GenerateLibrariesXml) {
    description "Will read project libraries from projectlibraries.properties and generate libraries.xml in .mps directory. Libraries are loaded in mps during start."
    defaults rootProject.file('projectlibraries.properties')
    destination file('code/.mps/libraries.xml')
    overrides rootProject.file('projectlibraries.overrides.properties')
}

task resolveLibs(type: Copy) {
    doFirst {
        delete libsDirectory
    }
    from {
        configurations.libs.resolve()
    }
    into libsDirectory
}

task resolveMps(type: Copy) {
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into mpsDir
}

task resolveMpsArtifacts(type: Copy) {
    from {
        configurations.mpsArtifacts.resolve().collect { zipTree(it) }
    }
    into artifactsDir
}

task setup {
    // We resolve MPS not for the users to use it but for the distribution packaging script to be able to refer to it.
    dependsOn resolveMpsArtifacts
    dependsOn generateLibrariesXml
    description 'Set up MPS project libraries. Libraries are read in from projectlibraries.properties file.'
}

ext.defaultAntScriptArgs = [
        '-Dproject.home=' + file(rootDir).getAbsolutePath(),
        '-Dmps.home=' + mpsDir.getAbsolutePath(),
        '-Dartifacts.root=' + new File(rootDir, 'artifacts')
]
ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({ true })

task generateMpsBuildScript(type: BuildLanguages, dependsOn: [resolveMps, resolveMpsArtifacts]) {
    scriptArgs = defaultAntScriptArgs
    scriptClasspath = buildScriptClasspath
    script new File("$rootDir/build-scripts.xml")
}

task buildMpsModules(
        type: BuildLanguages,
        dependsOn: [
                generateMpsBuildScript,
                resolveMps,
                resolveMpsArtifacts,
                ':ui-client:packageNpmApp',
                ':model-client:copyModelClientToMps'
        ]) {
    scriptArgs = defaultAntScriptArgs
    description = "Build all MPS language"
    scriptClasspath = buildScriptClasspath
    script new File("$rootDir/build/org.modelix/build.xml")
}

assemble.dependsOn(buildMpsModules)

task runMpsTests(type: TestLanguages, dependsOn: buildMpsModules) {
    scriptArgs = defaultAntScriptArgs
    scriptClasspath = buildScriptClasspath
    script new File("$rootDir/build/test.org.modelix/build-tests.xml")
}

test.dependsOn(runMpsTests)